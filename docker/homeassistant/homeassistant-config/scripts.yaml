alias: dump configuration
sequence:
  - alias: set variables
    variables:
      scenes_by_friendly_name_getter: >
        {% raw %} {{ scenes_by_friendly_name[trigger.to_state.state] }} {% endraw %}
      single_press_completed_trigger: >
        {% raw %} {{ trigger.payload_json.action == 'SINGLE_PRESS_COMPLETED'}} {% endraw %}
      double_press_completed_trigger: >
        {% raw %} {{ trigger.payload_json.action == 'DOUBLE_PRESS_COMPLETED'}} {% endraw %}
      long_press_completed_trigger: >
        {% raw %} {{ trigger.payload_json.action == 'LONG_PRESS_COMPLETED'}} {% endraw %}
      long_press_ongoing_trigger: >
        {% raw %} {{ trigger.payload_json.action == 'LONG_PRESS_ONGOING'}} {% endraw %}
      button_action_value_template: >
        {% raw %} {{ value_json.action }} {% endraw %}
  - service: notify.configuration_notifier
    data:
      message: |
        # BEGIN AUTO GENERATED CONFIG
        # GENERATED AT: {{ utcnow().isoformat() }}

        {% for area in areas() -%}
        {% if not area_entities(area) | expand | selectattr('domain', 'eq', 'scene') | list -%}
        # {{ area }} does not have any scenes
        {% continue %}
        {%- endif %}

        # AUTO GENERATED CONFIG FOR {{ area }}: 
        input_select:
          autogen_{{ area }}_scenes_input_select_dropdown:
            name: autogen {{ area }} scenes input select
            options:
              {%- for item in area_entities(area) | expand | selectattr('domain', 'eq', 'scene')| list %}
              - {{ item.name }}
              {%- endfor %}
            initial: {{ area_entities(area) | expand | selectattr('domain', 'eq', 'scene')| first | attr('name') }}
            
        automation {{ area }}:
          - id: autogen_{{ area }}_scene_change_automation
            alias: autogen_change_{{ area }}_scenes
            description: (autogen) change the {{ area }} scenes from the dropdown
            trigger:
              - platform: state
                entity_id:
                  - input_select.{{ area }}_scenes_input_select_dropdown
            condition: []
            mode: queued
            action:
              - service: scene.turn_on
                target:
                  entity_id: >
                    {{ '{% raw %}' }} {{ scenes_by_friendly_name_getter }} {{ '{% endraw %}' }}
            variables:
              scenes_by_friendly_name:
                {%- for item in area_entities(area) | expand | selectattr('domain', 'eq', 'scene')| list %}
                  {{ item.name }}: {{ item.entity_id }}
                {%- endfor %}
          # # MQTT SUBSCRIPTION AUTOMATIONS

          # # TURN ON {{ area }}
          # - id: autogen_{{ area }}_turn_on_autogen
          #   alias: autogen_{{ area }}_turn_on_autogen
          #   description: (autogen) turn on the devices configured for {{ area }} from mqtt event
          #   trigger:
          #     - platform: mqtt
          #       topic: picotomqtt/{{ area }}/+/power-on
          #   action:
          #     - choose:
          #         - conditions:
          #             - condition: or
          #               conditions:
          #                 - condition: template
          #                   value_template: "{{ '{% raw %}' -}} {{ single_press_completed_trigger }} {{- '{% endraw %}' }}"
          #                 - condition: template
          #                   value_template: "{{ '{% raw %}' -}} {{ long_press_completed_trigger }} {{- '{% endraw %}' }}"
          #                 - condition: template
          #                   value_template: "{{ '{% raw %}' -}} {{ double_press_completed_trigger }} {{- '{% endraw %}' }}"
          #           sequence:
          #             - service: light.turn_on
          #               data:
          #                 brightness_pct: 100
          #               target:
          #                 entity_id: light.offis_group
          #         - conditions:
          #             - condition: template
          #               value_template: "{{ '{% raw %}' -}} {{ single_press_completed_trigger }} {{- '{% endraw %}' }}"
          #           sequence:
          #             - service: light.turn_on
          #               data:
          #                 brightness_pct: 10
          #               target:
          #                 entity_id: light.offis_group
          #   mode: queued
          # - id: autogen_{{ area }}_turn_off_autogen
          #   alias: {{ area }}_turn_off_autogen
          #   description: (autogen) turn off the devices configured for {{ area }} from mqtt event
          #   description: ""
          #   trigger:
          #     - platform: mqtt
          #       topic: picotomqtt/offis/+/power-off
          #       payload: SINGLE_PRESS_COMPLETED
          #       value_template: "{{ '{% raw %}' -}} {{ button_action_value_template }} {{- '{% endraw %}' }}"
          #     - platform: mqtt
          #       topic: picotomqtt/offis/+/power-off
          #       payload: LONG_PRESS_COMPLETED
          #       value_template: "{{ '{% raw %}' -}} {{ button_action_value_template }} {{- '{% endraw %}' }}"
          #     - platform: mqtt
          #       topic: picotomqtt/offis/+/power-off
          #       payload: DOUBLE_PRESS_COMPLETED
          #       value_template: "{{ '{% raw %}' -}} {{ button_action_value_template }} {{- '{% endraw %}' }}"
          #   condition: []
          #   action:
          #     - service: light.turn_off
          #       data: {}
          #       target:
          #         entity_id: light.offis_group
            mode: queued
        {% endfor -%}
        # END AUTO GENERATED CONFIG
mode: single
icon: mdi:cog
